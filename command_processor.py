"""
Contains the response generated by a command request.
"""

import sys
import datetime
import socket
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from relay_controller import RelayManager
from internet_status import InternetStatus
from lib.recurring_task import RecurringTask
import lib.utilities as utilities
import lib.local_debug as local_debug
from lib.logger import Logger


class StatusServer(BaseHTTPRequestHandler):
    """
    Handles the HTTP response for status.
    """

    DEFAULT_HTML = "<html><body><h1>iReboot</h1></body></html>"
    STATUS_CALLBACK = None

    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        """
        Returns normal webserver traffic.
        """

        self._set_headers()

        html = StatusServer.DEFAULT_HTML

        try:
            if StatusServer.STATUS_CALLBACK is not None:
                html = StatusServer.STATUS_CALLBACK()
        except KeyboardInterrupt:
            quit()
        finally:
            self.wfile.write(html)

    def do_HEAD(self):
        """
        Sets the headers.
        """
        self._set_headers()

    def do_POST(self):
        """
        Handle posted data.
        """
        # Doesn't do anything with posted data
        self._set_headers()
        self.wfile.write("<html><body><h1>POST!</h1></body></html>")

# Main business logic of the iReboot
# Sets up up all of the connectivity checks
# Sets up the webserver
# Sets up the relay controller


class CommandProcessor(object):
    """
    Class to control a power relay based on internet connectivity.
    """

    ##############################
    #--- Public functions
    ##############################

    def run(self):
        """
        Service loop to run the iReboot
        """
        if self.__logger__ is not None:
            self.__logger__.log_info_message('Press Ctrl-C to quit.')

        self.__logger__.log_warning_message(
            "Local time is " + str(self.__get_local_time__()))

        # Serve forever never returns,
        # so setup tasks off thread
        RecurringTask("ProcessConnectivity", self.__configuration__.seconds_between_checks,
                      self.__process_connectivity__, self.__logger__, True)
        RecurringTask("UpdateController", 1,
                      self.__relay_controller__.update, True)
        StatusServer.STATUS_CALLBACK = self.get_webpage_html

        while True:
            try:
                self.__httpd__.serve_forever()
            except KeyboardInterrupt:
                quit()
            except:
                self.__logger__.log_warning_message(
                    "Got exception at " + str(self.__get_local_time__()))

    def __init__(self, buddy_configuration, logger):
        """
        Initialize the object.
        """

        self.__configuration__ = buddy_configuration
        self.__logger__ = logger
        self.__system_start_time__ = datetime.datetime.now()
        self.__modem_reboots__ = []

        # create heater relay instance
        self.__relay_controller__ = RelayManager(buddy_configuration, logger,
                                                 self.__relay_turned_on_callback__,
                                                 self.__relay_turned_off_callback__,
                                                 self.__relay_max_time_off_callback__)
        self.__internet_status__ = InternetStatus(
            self.__configuration__, self.__logger__)

        if logger is not None:
            self.__logger__.log_info_message(
                "Begin monitoring Internet status")

        port = 80
        local_ip = [l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1], [[(s.connect(
            ('8.8.8.8', 53)), s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, socket.SOCK_DGRAM)]][0][1]]) if l][0][0]

        if local_debug.is_debug():
            local_ip = ''
            port = 8080

        server_address = (local_ip, port)
        self.__httpd__ = HTTPServer(server_address, StatusServer)

    def __last_modem_reboot__(self):
        """
        Returns when the last reboot was.
        """

        try:
            if self.__modem_reboots__ is None:
                return None

            num_entries = len(self.__modem_reboots__)

            if num_entries < 1:
                return None

            return self.__modem_reboots__[num_entries - 1]
        except KeyboardInterrupt:
            quit()
        except:
            return None
        finally:
            return None

    ##############################
    #-- Event callbacks
    ##############################

    def __relay_turned_on_callback__(self):
        """
        Callback that signals the relay turned the heater on.
        """

        try:
            self.__logger__.log_warning_message(
                "Starting reboot. Turning modem off.")
        except KeyboardInterrupt:
            quit()
        except:
            pass
        finally:
            pass

    def __relay_turned_off_callback__(self):
        """
        Callback that signals the relay turned the heater off.
        """

        try:
            self.__logger__.log_warning_message("Turning Modem on.")
        except KeyboardInterrupt:
            quit()
        except:
            pass
        finally:
            pass

    def __relay_max_time_off_callback__(self):
        """
        Callback that signals the relay turned the heater off due to the timer.
        """

        try:
            self.__logger__.log_warning_message(
                "Time limit reached, turning Modem back on.")
        except KeyboardInterrupt:
            quit()
        except:
            pass
        finally:
            pass

    ##############################
    #-- Command execution
    ##############################

    def __time_since_last_reboot__(self):
        """
        How long has it been since we last rebooted the modem?
        Returns the total uptime if the modem has not been rebooted
        since the process was started
        """

        try:
            if self.__last_modem_reboot__() is None:
                return (datetime.datetime.now() - self.__system_start_time__).total_seconds()

            return (datetime.datetime.now() - self.__last_modem_reboot__()).total_seconds()
        except KeyboardInterrupt:
            quit()
        except:
            return 0
        finally:
            return 0

    def __restart__(self):
        """
        Restarts the Pi
        """
        self.__logger__.log_info_message("RESTARTING. Turning off relay")
        self.__relay_controller__.turn_off()
        utilities.restart()

    def __shutdown__(self):
        """
        Shuts down the Pi
        """
        self.__logger__.log_info_message("SHUTDOWN: Turning off relay.")
        self.__relay_controller__.turn_off()

        self.__logger__.log_info_message(
            "SHUTDOWN: Shutting down iReboot.")
        utilities.shutdown()

    def __clear_queue__(self, queue):
        """
        Clears a given queue.
        """
        if queue is None:
            return False

        while not queue.empty():
            self.__logger__.log_info_message("cleared message from queue.")
            queue.get()

    ##############################
    #-- Recurring thread tasks
    ##############################

    def __get_local_time__(self, time_to_adjust=datetime.datetime.now()):
        """
        Returns the local system time.
        """

        return time_to_adjust + datetime.timedelta(hours=self.__configuration__.utc_offset)

    def __build_table_cell_and_text__(self, key, text_dictionary, color_dictionary):
        """
        Builds a table cell with the given text and color.
        """
        text_color = "white"
        try:
            text_color = color_dictionary[key]
        finally:
            pass

        text = "ERROR"
        try:
            text = text_dictionary[key]
        finally:
            pass

        return "<td style=\"background-color:" \
               + text_color \
               + "; width: 50%; margin-left:auto; margin-right: auto; \">" \
               + text \
               + "</td>"

    def get_webpage_html(self):
        """
        Updates the webpage.
        """

        try:
            new_html = open("response_template.html", "r").read()

            # <!-- SUBSTITUTIONS -->
            #
            # <!-- $page_generation_time$ -->
            # <!-- $seconds_between_checks$ -->
            # <!-- $uptime$ -->
            # <!-- $last_check_time$ -->
            # <!-- $time_since_last_reboot$ -->
            # <!-- $relay_time_remaining$ -->
            # <!-- $modem_status_with_style$ -->
            # <!-- $internet_status_with_style$ -->
            # <!-- $site_status_rows$ -->
            # <!-- $reboots_list$ -->

            online_status_colors = {True: "green", False: "red"}
            modem_status_text = {True: "ONLINE", False: "OFFLINE"}
            relay_status_text = {True: "SHUTDOWN", False: "POWERED"}
            relay_status_colors = {True: "yellow", False: "green"}

            page_generation_time = str(
                self.__get_local_time__(datetime.datetime.now()))
            uptime = (datetime.datetime.now() -
                      self.__system_start_time__).total_seconds()
            modem_status_and_style = self.__build_table_cell_and_text__(
                self.__relay_controller__.is_relay_on(), relay_status_text, relay_status_colors)
            internet_status_and_style = self.__build_table_cell_and_text__(
                self.__internet_status__.is_internet_up(), modem_status_text, online_status_colors)
            site_status_table_rows = ""

            site_status = self.__internet_status__.get_site_status()
            for site in self.__configuration__.urls_to_check:
                try:
                    site_status_table_rows += "<tr><td style=\"background-color:" + \
                        online_status_colors[site_status[site]] + \
                        ";\"><a href=\"http://" + site + "\">" + site + "</a></td></tr>\n"
                finally:
                    pass
            reboot_list = ""

            num_reboots = len(self.__modem_reboots__)
            if num_reboots == 0:
                reboot_list += "<li>None</li>"
            else:
                for reboot_time in reversed(self.__modem_reboots__):
                    reboot_list += "<li>"
                    reboot_list += str(self.__get_local_time__(reboot_time))
                    reboot_list += "</li>"

            new_html = new_html.replace(
                "$page_generation_time$", page_generation_time)
            new_html = new_html.replace("$seconds_between_checks$", str(
                self.__configuration__.seconds_between_checks))
            new_html = new_html.replace(
                "$uptime$", utilities.get_time_text(uptime))
            new_html = new_html.replace("$last_check_time$", str(
                self.__get_local_time__(self.__internet_status__.last_check_time)))
            new_html = new_html.replace("$time_since_last_reboot$", utilities.get_time_text(
                self.__time_since_last_reboot__()))
            new_html = new_html.replace(
                "$relay_time_remaining$", self.__relay_controller__.get_relay_time_remaining())
            new_html = new_html.replace(
                "$modem_status_with_style$", modem_status_and_style)
            new_html = new_html.replace(
                "$internet_status_with_style$", internet_status_and_style)
            new_html = new_html.replace(
                "$site_status_rows$", site_status_table_rows)
            new_html = new_html.replace("$reboots_list$", reboot_list)
        finally:
            new_html += "</body></html>"

            return new_html

    ##############################
    #-- Servicers
    ##############################

    def __process_connectivity__(self):
        """
        Process if we have connectivity to the internet.
        If we do not, then start the reboot process.
        Otherwise returns the number of total seconds.
        """

        should_start_reboot = False

        try:
            if not self.__internet_status__.is_internet_up():
                # Check to see if we are rebooting.
                time_since_last_reboot = self.__time_since_last_reboot__()
                next_reboot_time = self.__configuration__.seconds_to_wait_after_power_on \
                    + self.__configuration__.seconds_to_power_off

                if time_since_last_reboot > next_reboot_time:
                    should_start_reboot = True
        except KeyboardInterrupt:
            quit()
        except:
            self.__logger__.log_warning_message("Exception while trying to decide on reboot.")
            should_start_reboot = False

        if should_start_reboot:
            try:
                self.__modem_reboots__.append(datetime.datetime.now())
                self.__relay_controller__.turn_on()
            except KeyboardInterrupt:
                quit()
            except:
                self.__logger__.log_warning_message("Exception while trying to start reboot.")

    def __run_servicer__(self, service_callback, service_name):
        """
        Calls and handles something with a servicer.
        """

        if service_callback is None:
            self.__logger__.log_warning_message(
                "Unable to service " + service_name)

        try:
            service_callback()
        except KeyboardInterrupt:
            quit()
        except:
            self.__logger__.log_warning_message(
                "Exception while servicing " + service_name)
            print "Error:", sys.exc_info()[0]


##################
### UNIT TESTS ###
##################


#############
# SELF TEST #
#############
if __name__ == '__main__':
    import doctest
    import logging
    import configuration

    print "Starting tests."

    doctest.testmod()
    CONFIG = configuration.Configuration()

    CONTROLLER = CommandProcessor(
        CONFIG, Logger(logging.getLogger("Controller")))

    CONTROLLER.run()

    print "Tests finished"
    exit()
